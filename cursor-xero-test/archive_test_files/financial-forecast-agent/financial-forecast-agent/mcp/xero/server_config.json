{
  "mcp_server": {
    "command": ["node", "dist/index.js"],
    "args": [],
    "env": {
      "XERO_BEARER_TOKEN": "${XERO_BEARER_TOKEN}",
      "NODE_ENV": "production"
    }
  },
  "braid_integration": {
    "dependencies": [
      "https://github.com/XeroAPI/xero-mcp-server.git",
      "node>=18.0.0"
    ],
    "tool_prefix": "xero_",
    "resource_namespace": "xero",
    "auto_start": true,
    "port": 3004,
    "timeout": 45000
  },
  "docker_config": {
    "image": "node:18-alpine",
    "ports": ["3004:3004"],
    "environment": [
      "XERO_BEARER_TOKEN=${XERO_BEARER_TOKEN}",
      "NODE_ENV=production",
      "NODE_OPTIONS=--max-old-space-size=512"
    ],
    "volumes": [
      "./xero-cache:/app/cache"
    ],
    "health_check": {
      "test": ["CMD", "node", "-e", "process.exit(0)"],
      "interval": "30s",
      "timeout": "15s",
      "retries": 3,
      "start_period": "90s"
    },
    "command": ["node", "dist/index.js"],
    "working_dir": "/app",
    "user": "node",
    "restart_policy": "unless-stopped",
    "networks": ["braid-mcp-network"],
    "build": {
      "context": ".",
      "dockerfile": "Dockerfile",
      "target": "production"
    }
  },
  "rate_limiting": {
    "requests_per_minute": 60,
    "requests_per_day": 5000,
    "burst_limit": 10,
    "retry_after": 60,
    "backoff_strategy": "exponential",
    "max_retries": 3,
    "notes": "Xero API allows 60 requests per minute, 5000 per day with burst capacity"
  },
  "validation": {
    "required_env_vars": ["XERO_BEARER_TOKEN"],
    "api_endpoints": ["https://api.xero.com/api.xro/2.0"],
    "test_command": ["node", "-e", "console.log('Xero MCP Server ready')"],
    "authentication_test": {
      "endpoint": "/organisations",
      "method": "GET",
      "expected_status": 200
    }
  },
  "security": {
    "token_validation": true,
    "scope_requirements": [
      "accounting.transactions",
      "accounting.contacts",
      "accounting.settings"
    ],
    "sensitive_data_handling": {
      "mask_tokens": true,
      "secure_logging": true,
      "data_retention": "30d"
    }
  },
  "monitoring": {
    "metrics_enabled": true,
    "health_endpoint": "/health",
    "metrics_endpoint": "/metrics",
    "log_level": "info"
  }
}