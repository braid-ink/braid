version: '3.8'

services:
  # Production Financial Forecast Agent
  forecast-agent:
    build:
      context: .
      dockerfile: Dockerfile.production
    container_name: financial-forecast-agent-prod
    ports:
      - "8000:8000"
      - "8080:8080"  # For Xero OAuth callback
    environment:
      # OpenAI & LangChain
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - LANGCHAIN_API_KEY=${LANGCHAIN_API_KEY}
      - LANGCHAIN_TRACING_V2=${LANGCHAIN_TRACING_V2}
      
      # API Keys
      - XERO_ACCESS_TOKEN=${XERO_ACCESS_TOKEN}
      - XERO_CLIENT_ID=${XERO_CLIENT_ID}
      - XERO_CLIENT_SECRET=${XERO_CLIENT_SECRET}
      - XERO_REDIRECT_URI=${XERO_REDIRECT_URI}
      - PERPLEXITY_API_KEY=${PERPLEXITY_API_KEY}
      - NOTION_API_KEY=${NOTION_API_KEY}
      
      # Production Settings
      - NODE_ENV=production
      - LOG_LEVEL=info
      - HEALTH_CHECK_PORT=8000
      
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
    restart: unless-stopped
    
    # Resource limits for production
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '0.5'
          memory: 1G
    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    
    networks:
      - forecast-network

  # Production Database (SQLite with persistence)
  forecast-db:
    image: alpine:latest
    container_name: forecast-database
    volumes:
      - forecast-data:/data
    command: ["tail", "-f", "/dev/null"]  # Keep container running
    networks:
      - forecast-network

  # Monitoring (Prometheus compatible)
  prometheus:
    image: prom/prometheus:latest
    container_name: forecast-monitoring
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    networks:
      - forecast-network
    depends_on:
      - forecast-agent

  # Reverse Proxy (for production SSL termination)
  nginx:
    image: nginx:alpine
    container_name: forecast-proxy
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/ssl/certs
    depends_on:
      - forecast-agent
    networks:
      - forecast-network

networks:
  forecast-network:
    driver: bridge
    name: financial-forecast-network

volumes:
  forecast-data:
    driver: local